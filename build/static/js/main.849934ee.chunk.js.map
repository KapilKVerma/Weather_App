{"version":3,"sources":["components/Users.js","components/Navigation.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Users","useState","loading","setLoading","data","setData","useEffect","axios","get","headers","process","then","res","console","log","catch","error","finally","Container","Row","className","map","user","Col","lg","key","id","Card","Img","variant","src","picture","Body","Title","title","toUpperCase","firstName","lastName","Text","email","Navigation","mel","setMel","str","Date","day","slice","date","response","alert","Navbar","expand","Brand","Nav","Link","href","style","color","fontSize","name","Math","round","main","temp","fontWeight","Weather","weatherData","setWeatherData","city","country","searchQuery","setSearchQuery","API_KEY","backgroundImage","Form","onSubmit","e","preventDefault","display","flexDirection","justifyContent","Group","Control","type","placeholder","onChange","target","value","Button","textAlign","backgroundColor","borderRadius","marginLeft","sys","weather","icon","alt","description","temp_max","temp_min","humidity","App","Fragment","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.849934ee.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card, Row, Col, Container } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://dummyapi.io/data/api\";\r\nconst APP_ID = process.env.REACT_APP_USERS_KEY;\r\n\r\nconst Users = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(`${BASE_URL}/user`, { headers: { \"app-id\": APP_ID } })\r\n      .then((res) => {\r\n        setData(res.data.data);\r\n        console.log(res.data);\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading && \"Loading...\"}\r\n      <Container>\r\n        <Row className=\"m-5\">\r\n          {\" \"}\r\n          {data &&\r\n            data.map((user) => {\r\n              return (\r\n                <Col lg={3} key={user.id} className=\"mb-4\">\r\n                  <Card>\r\n                    <Card.Img variant=\"top\" src={user.picture} />\r\n                    <Card.Body>\r\n                      <Card.Title>\r\n                        {user.title.toUpperCase()}. {user.firstName}{\" \"}\r\n                        {user.lastName}\r\n                      </Card.Title>\r\n                      <Card.Text>{user.email}</Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              );\r\n            })}\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\r\nimport \"./Navigation.css\";\r\nimport axios from \"axios\";\r\n\r\nconst Navigation = () => {\r\n  const API_KEY = \"1e4751a83efdd4c20377f43b5eeffeba\";\r\n  const [mel, setMel] = useState();\r\n  var str = Date();\r\n  var day = str.slice(0, 3);\r\n  let date = str.slice(4, 15);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=Melbourne,au&appid=${API_KEY}&units=metric`\r\n      )\r\n      .then((response) => {\r\n        setMel(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"No record found! Try again.\");\r\n      });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" className=\"navigation\">\r\n        <Container>\r\n          <Navbar.Brand>\r\n            <Nav.Link href=\"/\" className=\"p-2\">\r\n              <i\r\n                className=\"fas fa-cloud-sun-rain\"\r\n                style={{ color: \"antiquewhite\", fontSize: \"3rem\" }}\r\n              ></i>\r\n            </Nav.Link>\r\n          </Navbar.Brand>\r\n\r\n          {mel ? (\r\n            <div className=\"navigation-info\">\r\n              {mel.name} {Math.round(mel.main.temp)}\r\n              <sup>&#8451;</sup> |<span className=\"\"> {day ? day : null}</span>,\r\n              <span className=\"\"> {date ? date : null}</span>\r\n            </div>\r\n          ) : null}\r\n          <Nav className=\"justify-content-end users\">\r\n            <Nav.Link\r\n              href=\"/users\"\r\n              className=\"p-2\"\r\n              style={{\r\n                color: \"teal\",\r\n                fontWeight: \"600\",\r\n                fontSize: \"1.4rem\",\r\n              }}\r\n            >\r\n              Users\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Card, Form, Button, Row, Col } from \"react-bootstrap\";\r\n\r\nimport axios from \"axios\";\r\nconst Weather = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [weatherData, setWeatherData] = useState();\r\n  const [searchQuery, setSearchQuery] = useState({\r\n    city: \"\",\r\n    country: \"\",\r\n  });\r\n  const API_KEY = process.env.REACT_APP_KEY;\r\n\r\n  const search = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${searchQuery.city},${searchQuery.country}&appid=${API_KEY}&units=metric`\r\n      )\r\n      .then((response) => {\r\n        setWeatherData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"No record found! Try again.\");\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=Melbourne,au&appid=${API_KEY}&units=metric`\r\n      )\r\n      .then((response) => {\r\n        setWeatherData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"weather-body\"\r\n      style={{\r\n        backgroundImage:\r\n          \"url(https://images.unsplash.com/photo-1592385148581-7583a3daec7b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1055&q=80\",\r\n      }}\r\n    >\r\n      {loading && \"Loading...\"}{\" \"}\r\n      <Container className=\"weather-container\">\r\n        <Form\r\n          onSubmit={search}\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              onChange={(e) => {\r\n                setSearchQuery({ ...searchQuery, city: e.target.value });\r\n              }}\r\n              className=\"weather-search\"\r\n            />{\" \"}\r\n          </Form.Group>{\" \"}\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {\" \"}\r\n            <Button variant=\"warning\" type=\"submit\" className=\"search-button\">\r\n              <i className=\"fas fa-search\"></i>\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n        {weatherData && (\r\n          <Card className=\"weather-card\">\r\n            <Row>\r\n              <Col\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  backgroundColor: \"antiquewhite\",\r\n                  borderRadius: \"5px\",\r\n                  marginLeft: \"1%\",\r\n                }}\r\n              >\r\n                <h4>\r\n                  {weatherData.name}, {weatherData.sys.country}\r\n                </h4>\r\n                <div className=\"weather-icon\">\r\n                  <img\r\n                    src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@4x.png`}\r\n                    alt=\"weather icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"weather-description\">\r\n                  {weatherData.weather[0].description.toUpperCase()}\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <div\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <span className=\"weather-info\">\r\n                    {Math.round(weatherData.main.temp)}\r\n                  </span>\r\n                  <sup className=\"degree\">&#8451;</sup> <div>Current Temp.</div>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <div\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <span className=\"weather-info\">\r\n                    {Math.round(weatherData.main.temp_max)}\r\n                  </span>\r\n                  <sup className=\"degree\">&#8451;</sup> <div>Max Temp.</div>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                {\" \"}\r\n                <div\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <span className=\"weather-info\">\r\n                    {Math.round(weatherData.main.temp_min)}\r\n                  </span>\r\n                  <sup className=\"degree\">&#8451;</sup> <div>Min Temp.</div>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                {\" \"}\r\n                <div\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <span className=\"weather-info\">\r\n                    {Math.round(weatherData.main.humidity)}\r\n                  </span>\r\n                  <sup className=\"degree\">%</sup> <div>Humidity</div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Card>\r\n        )}{\" \"}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Users from \"./components/Users\";\nimport Navigation from \"./components/Navigation\";\nimport Weather from \"./components/Weather\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact component={Weather} />\n          <Route path=\"/users\" exact component={Users} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}